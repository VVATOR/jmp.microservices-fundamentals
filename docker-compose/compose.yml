version: "3.9"

services:
  ##### DATABASES required by services #####
  resource-service-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${RESOURCE_POSTGRES_DB}
      - POSTGRES_USER=${RESOURCE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${RESOURCE_POSTGRES_PASSWORD}
    expose: # allow access in docker network only (service not available from host)
      - "5432"
    ports: # allow access from host to services in docker (service available from host)
      - "5432:5432"
    command: -p 5432
    networks:
      - spring-services-network

  song-service-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${SONG_POSTGRES_DB}
      - POSTGRES_USER=${SONG_POSTGRES_USER}
      - POSTGRES_PASSWORD=${SONG_POSTGRES_PASSWORD}
    expose: # allow access in docker network only (service not available from host)
      - "5433"
    ports: # allow access from host to services in docker (service available from host)
      - "5433:5433"
    command: -p 5433
    networks:
      - spring-services-network

  ##### AWS SERVICES EMULATION: S3 STORAGE #####
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main1}"
    image: localstack/localstack
    expose:
      - "4566"
    ports:
      - "4510-4559:4510-4559"         # external services port range
      - "4566:4566"                   # LocalStack Gateway
      - "4572:4572"
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - SERVICES=s3,sqs,lambda,cloudformation,sts,iam,cloudwatch,apigateway,events
      - HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack
      - DEBUG=1
      - SERVICES=s3
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=${AWS_BUCKET}
      - DEFAULT_REGION=${AWS_DEFAULT_REGION}
    volumes:
      #- "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      # Initialization Hooks https://docs.localstack.cloud/references/init-hooks/
      - "./scripts/localstack/init-s3.sh:/etc/localstack/init/ready.d/init-s3.sh"
    networks:
      - spring-services-network

  ##### Messaging #####
  rabbitmq:
    image: rabbitmq:3.10.7-management
    restart: no
    expose:
      - "5672"
    ports:
      - "15672:15672"
      #- "5672:5672"
    networks:
      - spring-services-network

  ##### Infrastructure services #####
  discovery-service:
    image: jmp.microservices.fundamental/discovery-service:latest
    env_file:
      - .env
    expose:
      - "8761"
    ports:
      - "8761:8761"
    networks:
      - spring-services-network

  api-gateway-service:
    image: jmp.microservices.fundamental/api-gateway-service:latest
    env_file:
      - .env
    expose:
      - "8080"
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
    networks:
      - spring-services-network

  config-service:
    image: jmp.microservices.fundamental/config-service:latest
    env_file:
      - .env
    depends_on:
      - discovery-service
    networks:
      - spring-services-network

  ##### APPLICATION services #####
  resource-processor:
    image: jmp.microservices.fundamental/resource-processor:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - discovery-service
      - rabbitmq
    networks:
      - spring-services-network

  resource-service:
    image: jmp.microservices.fundamental/resource-service:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - discovery-service
      - resource-service-db
      - localstack
      - rabbitmq
    networks:
      - spring-services-network

  song-service:
    image: jmp.microservices.fundamental/song-service:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - discovery-service
      - song-service-db
    networks:
      - spring-services-network

networks:
  spring-services-network:
    driver: bridge